// Generated by gencpp from file angela/motormsg.msg
// DO NOT EDIT!


#ifndef ANGELA_MESSAGE_MOTORMSG_H
#define ANGELA_MESSAGE_MOTORMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace angela
{
template <class ContainerAllocator>
struct motormsg_
{
  typedef motormsg_<ContainerAllocator> Type;

  motormsg_()
    : rate(0.0)
    , direction(0.0)  {
    }
  motormsg_(const ContainerAllocator& _alloc)
    : rate(0.0)
    , direction(0.0)  {
  (void)_alloc;
    }



   typedef float _rate_type;
  _rate_type rate;

   typedef float _direction_type;
  _direction_type direction;




  typedef boost::shared_ptr< ::angela::motormsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::angela::motormsg_<ContainerAllocator> const> ConstPtr;

}; // struct motormsg_

typedef ::angela::motormsg_<std::allocator<void> > motormsg;

typedef boost::shared_ptr< ::angela::motormsg > motormsgPtr;
typedef boost::shared_ptr< ::angela::motormsg const> motormsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::angela::motormsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::angela::motormsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace angela

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/lunar/share/std_msgs/cmake/../msg'], 'angela': ['/home/pi/tanis/CodeBase/ros/src/angela/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::angela::motormsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::angela::motormsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::angela::motormsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::angela::motormsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::angela::motormsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::angela::motormsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::angela::motormsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "153a52f0077559b064690b516499badc";
  }

  static const char* value(const ::angela::motormsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x153a52f0077559b0ULL;
  static const uint64_t static_value2 = 0x64690b516499badcULL;
};

template<class ContainerAllocator>
struct DataType< ::angela::motormsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "angela/motormsg";
  }

  static const char* value(const ::angela::motormsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::angela::motormsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 rate\n\
float32 direction\n\
";
  }

  static const char* value(const ::angela::motormsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::angela::motormsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rate);
      stream.next(m.direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motormsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::angela::motormsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::angela::motormsg_<ContainerAllocator>& v)
  {
    s << indent << "rate: ";
    Printer<float>::stream(s, indent + "  ", v.rate);
    s << indent << "direction: ";
    Printer<float>::stream(s, indent + "  ", v.direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ANGELA_MESSAGE_MOTORMSG_H
